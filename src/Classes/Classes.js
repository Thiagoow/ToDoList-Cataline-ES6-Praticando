/*
Veremos os m√©todos das fun√ß√µes, as classes, que servem para 
n√£o criarmos um fun√ß√£o dentro de outra fun√ß√£o, ou v√°rias fun√ß√µes, dentro de uma s√≥.
Por isso utilizamos as classes, onde nela, podemos criar v√°rios m√©todos e at√© mesmo fun√ß√µes construtoras,
como por exemplo:
*/

//Jeito CERTO:
class Car {
  /*
  Fun√ß√£o construtora de carros, onde atribu√≠mos 
  valores default para os atributos de carros, 
  caso n√£o sejam modificados:
  */
  constructor(
    brand = "ERRO - Sem marca ü§î",
    model = "ERRO - Sem modelo ü§î",
    price = "ERRO - Sem pre√ßo ü§î"
  ) {
    this.brand = brand;
    this.model = model;
    this.price = price;
  }

  acelerar() {
    console.log("Vrruummm!");
  }
}

const celta = new Car("Chevrolet", "Celta");
const hb20 = new Car("Hyundai", "HB20", "160K");

console.log("Celta fez:");
celta.acelerar();
console.log(celta);
console.log("O pre√ßo √©: " + celta.price);
console.log(hb20);
console.log("A marca √©: " + hb20.brand);

/*
Jeito ERRADO:

//Fun√ß√£o construtora de carros:
function Car(brand, model, price) {
  this.brand = brand;
  this.model = model;
  this.price = price;
}

const celta = new Car("Chevrolet", "Celta", "100K");
const hb20 = new Car("Hyundai", "HB20", "160K");

console.log(celta);
console.log(hb20);
*/
